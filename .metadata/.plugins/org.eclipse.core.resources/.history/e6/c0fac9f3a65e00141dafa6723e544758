package edu.projecteuler.circularprimes;

import java.util.LinkedList;
import java.util.List;

public class CircularPrimes {

	private static boolean isPrime(int x) {
		final int end = (int) Math.sqrt(x);
		for (int i = 2; i < end; ++i) {
			if (x % i == 0) {
				return false;
			}
		}
		return true;
	}

	private static List<Integer> getDigits(int number) {
		final List<Integer> result = new LinkedList<Integer>();
		while (number > 0) {
			result.add(0, number % 10);
			number = number / 10;
		}
		return result;
	}

	private static int digitsToNumber(final List<Integer> digits) {
		int result = 0;
		for (int i = 0; i < digits.size(); ++i) {
			result += digits.get(i) * Math.pow(10, i);
		}
		return result;
	}

	private static List<Integer> getRotations(int number) {
		final List<Integer> result = new LinkedList<>();
		final List<Integer> digits = getDigits(number);

		int rotationCount = 0;
		while (rotationCount < digits.size()) {
			final List<Integer> copy = new LinkedList<>(digits);
			final int removed = copy.remove(rotationCount);
//			copy.add(rotationCount, removed);
//			System.out.println("removed is " + removed);
//			System.out.println("rotation count is " + rotationCount);
			System.out.println("copy is " + copy);
//			result.add(digitsToNumber(copy));
			++rotationCount;
		}

		return result;
	}

	public static void main(String[] args) {
		System.out.println(getRotations(197));
	}
}
